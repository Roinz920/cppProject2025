/*
*	Date : 2025-04-21
	Name : 김정민
	Subject : 객체지향 프로그래밍 (OOP)의 특징, (SOLID)원칙 이론
*/

/*
*	절차지향 프로그래밍 vs 객체지향 프로그램
*	절차 : 함수로 프로그래밍을 진행
*	장점 : 코드가 매우 빠르다. 구현이 용이하다.
*	단점 : 확정성에 취약하다. 프로그래밍의 규모가 거대해지면 코딩 난이도가 어려워진다.

	객체 : 객체 데이터가 행동하도록 프로그래밍
	장점 : 코드의 확장성이 유연하다.
	단점 : 코드의 구현속도가 (상대적으로)느리다. 미리 설계를 해야한다.
*/

/*
*	OOP의 특징. 캡슐화, 추상화, 상속, 다형성
*/

/*
*	객체를 다른 객체로 표현하기.
* 
*	사각형 (점)
* 
*	플레이어 (HP, stat)
*	적군 (HP, stat)
* 
*	기능1. 전투를 할 떄 공통적인 기능 조사
*	기능2. 객체 표현
*/

/*
*	도전과제1. 은행계좌 객체 - 계좌, 입금, 출금
*	도전과제2. 계산기 반들기 - 숫자, 기호 계산 함수 실행
*	도전과제3. (학생, 몬스터, 도서) 관리 프로그램 - 게임 도감 (데이터 찾기, 삭제, 추가)
*/

#include "OOP.h"
#include "HP.h"
#include "Player.h"
#include "enemy.h"

int main()
{
	
	Example1();

	Player player;
	player.HP = 100;	// 이렇게 외부에서 private에 선언된 변수에 접근이 가능하게 하는 것을 '에디팅'이라고 부름
	
}